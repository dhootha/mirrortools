USE [master]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[mirrortools]

    -- Designated Mirroring Action (force, failover, suspend, resume)
	@action		varchar(20) = 'help',

    -- Comma delimited list of databases to use or '*' for all databases
	-- feel free to change to any of the legal options such as 'high-protection', 'high-avaibility', '*', 
    -- or just a comma delimited list of databases.
	@data		varchar(max) = '*'
	
AS
	/* 
		mirrortools

		description
			a native T-SQL based comprehensive management tool for a set of mirrored databases between two servers.
			Note: at this time, mirrortools only supports a configuration where a databases are mirrored between
			two servers. (e.g. you can't have database foo mirrored with server_a and database bar mirrored with
			server_b from the server on which mirrortools is run.
		    
		author
			Zakir Durumeric
			Research Information Systems (RIS)
			Office of the Vice-President for Research
			The University of Iowa
			zakir - durumeric @ uiowa . edu 

		dependencies:
			The SYNCLOGIN functionality requires the partner synclogins stored procedure to be installed and to exist
			within the same database as the mirrortools procedure.
		    
		necessary configuration:
			For all tools except COPY, all necessary configuration can be completed by modifying the appropriate values 
			within the BEGIN PROCEDURE CONFIGURATION (USER EDITABLE) section of the file, several lines below 
			this notice. 
		    
			The COPY is environment specific and therefore the command requires additional configuration.
			Due to this additional necessary configuration, it is disabled by default. Once it has been configured for 
			your environment, it must be enabled within the PROCEDURE CONFIGURATION section. 
		        
		version: 
			v4.91, 8/26/2009

		disclaimer:
		
			Copyright (c) 2007 The University of Iowa
			
			Permission is hereby granted, free of charge, to any person obtaining a copy
			of this software and associated documentation files (the "Software"), to deal
			in the Software without restriction, including without limitation the rights
			to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
			copies of the Software, and to permit persons to whom the Software is
			furnished to do so, subject to the following conditions:

			The above copyright notice and this permission notice shall be included in
			all copies or substantial portions of the Software.

			THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
			AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
			LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
			OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
			THE SOFTWARE.

	*/

	SET NOCOUNT ON;
	
	DECLARE
		@server_a varchar(255),
		@server_b varchar(255),
		@server_w varchar(255),
		@domain varchar(255),
		@partner sysname,
        @partner_fqdn varchar(1000),
        @self_fqdn varchar(1000),
		@endpoint_port varchar(10),
		@copy_command_enabled bit; 

	/***************************************** BEGIN PROCEDURE CONFIGURATION (USER EDITABLE) *************************/

	-- endpoint values are generated based on these values. Generally, we've found it best for the endpoint ports
	-- to match between the two servers. FQDN are generated by server-name + . + domain + ':' + endpoint-port. If 
	-- servers are on different domains, set @domain = '' and include domain within each respective server-name.
	
	-- servernames should match watch is returned by calling `SELECT @@servername`
    -- NOT the FQDN of the server. The server domain will be specified later
	SET @server_a = 'server_a' -- cluster node A 
	SET @server_b = 'server_b' -- cluster node B
	SET @server_w = 'server_w' -- witness Server (set to null if no witness server)
	
	-- TCP port of database mirroring endpoint. default port = 5022
	SET @endpoint_port = '5022'
	
	-- domain of the servers utilized to generate FQDN
	SET @domain = 'iowa.uiowa.edu'

    -- Set to true if you have configured shares and variables for database copying. Initially disabled. 
	SET @copy_command_enabled = 'false'
	
	/****************************************** END PROCEDURE CONFIGURATION (USER EDITABLE) **************************/
	
	/****************************************** NORMALIZE INPUT PARAMETERS *******************************************/
	
	SET @action = UPPER(@action)

	-- Don't crash because I used spaces!
	IF @action <> 'PARTNERDO' BEGIN
		SET @data = REPLACE(@data,' ','');
	END
	
    -- Discover current server identities
	IF @@servername = @server_a BEGIN
		SET @partner = @server_b;
	END; ELSE BEGIN
		SET @partner = @server_a;
    END;

    SET @partner_fqdn = 'TCP://' + @partner + '.' + @domain + ':' + @endpoint_port;
    SET @self_fqdn = 'TCP://' + @@servername + '.' + @domain + ':' + @endpoint_port;

    DECLARE @actionMSG varchar(max);

	IF @action NOT IN (
        'FORCE',
		'FAILOVER',
		'SUSPEND',
		'RESUME',
		'COPY',
		'MIRROR',
		'MIRNOWIT',
		'KILLMIR',
		'RECOVER',
		'STATUS',
		'SYNCLOGIN',
		'AUTO_FAILOVER_OFF',
		'AUTO_FAILOVER_ON',
		'PARTNERDO',
		'PARTNERDROP',
		'HELP') 
	BEGIN
		SET @actionMSG = @action + ' is not a legal action. Run *mirrortools help* for more information.';
		raiserror(@actionMSG, 16, 2); 
		return(2)
	END; ELSE IF @action = 'COPY' and @copy_command_enabled <> 1 BEGIN
		SET @actionMSG = 'The COPY action is disabled. See README at beginning of procedure for additional details.'
		raiserror(@actionMSG, 16, 2); 
		return(2)
	END 

	/****************************************** HANDLE BASIC ACTIONS (NON-CRSR) *****************************************/

	-- IF user requests login sync, call sp_sync_logins and skip the rest of the sp.
	IF @action = 'SYNCLOGIN' BEGIN
		exec sync_logins @data, @partner;
		return(0);
	END; ELSE IF @action = 'HELP' begin
		PRINT 'MirrorTools Help';
		PRINT 'Syntax:';
		PRINT 'mirrortools [ @action = ] ''action'', [ @data = ] ''databases or commands''';
		PRINT 'Arguments';
		PRINT '[ @action = ] ''action'' Specified Action. objects is varchar(20) with no default. Available actions are listed below:';
		PRINT '    FAILOVER: failover group of databases to mirroring partner. Run from principal.';
		PRINT '    FORCE: performs forced failover to group of databases. Run from mirror.';
		PRINT '    SUSPEND: suspends mirroring for group of databases. Run from principal/mirror.';
		PRINT '    RESUME: resumes mirroring on group of suspENDed databases. Run from principal/mirror.';
		PRINT '    COPY: copies database from principal to mirror in order to be mirrrored. Run from principal.';
		PRINT '    MIRROR: mirrors database once copied to mirror using High Availability model (witness)';
		PRINT '    MIRNOWIT: mirrors database once copied to mirror using High Protection model (no witness)';
		PRINT '    KILLMIR: removes mirroring session for group of databases. Run from principal/mirror.';
		PRINT '    AUTO_FAILOVER_ON: Sets group of databases to High-Safety with Auto Failover. Run from principal/mirror.';
		PRINT '    AUTO_FAILOVER_OFF: Sets group of databases to High-Safety without Auto Failover. Run from principal/mirror.';
		PRINT '    RECOVER: sets databases in ''restoring...'' mode to usable after mirroring session is destroyed. Run on mirror';
		PRINT '    SYNCLOGIN: synchronizes group of logins from principal to mirror. Run on principal';
		PRINT '    PARTNERDO: Executes t-sql command on partner instance of sql server';
		PRINT '    PARTNERDROP: Drops particular (single) database on partner server. Note: Does not accept comma-delimited list of databases.';
		PRINT '    STATUS: Displays current database mirroring status';
		PRINT '    HELP: Shows this help file...';
		PRINT '[ @data = ] ''databases or command'' Specified Objects. Objects is varchar(max) with ''*'' default. Syntax is below:';
		PRINT '    single database or user: ''database_name'' Ex. mirrortools failover, ''sa-mirror''';
		PRINT '    group of databases or users: ''database1, database2, database 3'' Ex. mirrortools copy ''database1, database2, database3''';
		PRINT '    all high-availibility databases (auto-failover): ''high-availibility'' Ex. mirrortools suspEND, ''high-availibility''';
		PRINT '    all high-protection databases (manual-failover): ''high-protection'' Ex. mirrortools suspEND, ''high-protection''';
		PRINT '    all eligible databases or users: ''*'' Ex. mirrortools suspend';
		PRINT '    t-sql command: ''t-sql here'' Ex. mirrortools PartnerDo, ''SELECT @@servername''';
		return(0);
	END; ELSE IF @action = 'PARTNERDO' BEGIN
		-- allows us to execute commands on the partner database server. This could also be modified to utilize
		-- a linked server for executing commands but you pretty much have to have xp_cmdshell enabled if you're
		-- going to utilize the COPY command in order to transfer files between the servers.
		DECLARE @command varchar(8000);
		SET @command = '"sqlcmd -E -S ' + @partner +' -Q "' + @data + '""';
		exec master.dbo.xp_cmdshell @command;
		return(0);
	END; ELSE IF @action = 'STATUS' BEGIN
		SELECT DB_NAME(database_id) as database_name, * FROM [sys].[database_mirroring] WHERE (mirroring_guid IS NOT NULL);
		return(0);
	END; ELSE IF @action='PARTNERDROP' BEGIN
		SET @data = REPLACE(REPLACE(@data,'[',''),']','');
		DECLARE @cmd_pdrp VARCHAR(255);
		SET @cmd_pdrp = 'IF EXISTS (SELECT name FROM sys.databases WHERE name = ''' + @data + ''') DROP DATABASE ' + QUOTENAME(@data);
		EXEC mirrortools 'PARTNERDO', @cmd_pdrp;
		return(0);
	END;

	/****************************************** HANDLE CURSOR-BASED ACTIONS *********************************************/

	DECLARE @actionable_databases TABLE(database_id int)
		
	DECLARE 
		@database_name varchar(255),
		@database_id int,
		@successes varchar(max), -- will contain a comma delimited list of databases for which the action succeeded.
		@failures varchar(max), -- same but for failures. these will be printed out as part of the end-results report.
		@err varchar(max),
		@errcode int;

	/****************************************** HANDLE WILD-CARDS IN @data ***********************************************/
	
	/* 
		Mirroring States Documentation:
			 0 = Null Notification
			 1 = Synchronized Principal with Witness
			 2 = Synchronized Principal without Witness
			 3 = Synchronized Mirror with Witness
			 4 = Synchronized Mirror without Witness
			 5 = Connection with Principal Lost
			 6 = Connection with Mirror Lost
			 7 = Manual Failover
			 8 = Automatic Failover
			 9 = Mirroring Suspended
			10 = No Quorum
			11 = Synchronizing Mirror
			12 = Principal Running Exposed
	*/
	
	IF @data = '*' begin
		IF @action = 'FORCE'
			INSERT INTO @actionable_databases
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND mirroring_state = 5;
		ELSE IF @action  in ('SUSPEND','KILLMIR')					
			INSERT INTO @actionable_databases
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND mirroring_state in (1,2,3,4,6,10,11,12,13);
		ELSE IF @action = 'FAILOVER'									
			INSERT INTO @actionable_databases 
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND mirroring_state in (1,2,4,6,10,13);
		ELSE IF @action = 'RESUME'									
			INSERT INTO @actionable_databases
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND mirroring_state in (0, 9);
		ELSE IF @action in ('MIRROR','COPY','RECOVER','MIRNOWIT')	
			INSERT INTO @actionable_databases 
            SELECT database_id FROM sys.databases 
				WHERE (database_id > 4);
		ELSE IF @action = 'AUTO_FAILOVER_OFF'
			INSERT INTO @actionable_databases 
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_witness_state <> 0);
		ELSE IF @action = 'AUTO_FAILOVER_ON'
			INSERT INTO @actionable_databases
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_witness_state = 0);

	END; ELSE IF @data = 'high-protection' BEGIN
		IF @action = 'FORCE'									
			INSERT INTO @actionable_databases 
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND (mirroring_witness_state = 0) AND mirroring_state = 5;
		ELSE IF @action  in ('SUSPEND','KILLMIR')					
			INSERT INTO @actionable_databases 
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND (mirroring_witness_state = 0) AND mirroring_state in (1,2,3,4,6,10,11,12,13);
		ELSE IF @action = 'FAILOVER'									
			INSERT INTO @actionable_databases 
			SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND (mirroring_witness_state = 0) AND mirroring_state in (1,2,4,6,10,13);
		ELSE IF @action = 'RESUME'									
			INSERT INTO @actionable_databases 
			SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND (mirroring_witness_state = 0) AND mirroring_state in (0, 9);
		ELSE IF @action in ('MIRROR','COPY','RECOVER','MIRNOWIT')	
			INSERT INTO @actionable_databases 
            SELECT database_id FROM sys.databases 
				WHERE (database_id > 4);
		ELSE IF @action = 'AUTO_FAILOVER_OFF'
			INSERT INTO @actionable_databases
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_witness_state <> 0);
		ELSE IF @action = 'AUTO_FAILOVER_ON'
			INSERT INTO @actionable_databases 
            SELECT database_id FROM sys.database_mirroring
				WHERE (mirroring_witness_state = 0);

	END; ELSE IF @data = 'high-availibility' BEGIN
		IF @action = 'FORCE'									
			INSERT INTO @actionable_databases 
			SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND (mirroring_witness_state <> 0) AND mirroring_state = 5;
		ELSE IF @action  in ('SUSPEND','KILLMIR')					
			INSERT INTO @actionable_databases 
			SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND (mirroring_witness_state <> 0) AND mirroring_state in (1,2,3,4,6,10,11,12,13);
		ELSE IF @action = 'FAILOVER'									
			INSERT INTO @actionable_databases 
			SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND (mirroring_witness_state <> 0) AND mirroring_state in (1,2,4,6,10,13);
		ELSE IF @action = 'RESUME'									
			INSERT INTO @actionable_databases 
			SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_guid IS NOT NULL) AND (mirroring_witness_state <> 0) AND mirroring_state in (0, 9);
		ELSE IF @action in ('MIRROR','COPY','RECOVER','MIRNOWIT')	
			INSERT INTO @actionable_databases
            SELECT database_id FROM sys.databases 
				WHERE (database_id > 4);
		ELSE IF @action = 'AUTO_FAILOVER_OFF'
			INSERT INTO @actionable_databases
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_witness_state <> 0);
		ELSE IF @action = 'AUTO_FAILOVER_ON'
			INSERT INTO @actionable_databases
            SELECT database_id FROM sys.database_mirroring 
				WHERE (mirroring_witness_state = 0);
	END; 

	-- if no wildcards... then parse through comma delimited list and populate @actionable_databases. 
	ELSE BEGIN 
		IF RIGHT(@data, 1) <> ','
			SET @data = @data + ','; -- Add a comma to the END of the of lists of databases for parsing easyness.

		DECLARE 
			@current_position int,
			@next_comma int;

		SET @current_position = 1; 
		SET @next_comma = charindex (',', @data, @current_position);

		WHILE @next_comma <> 0 BEGIN
			INSERT INTO @actionable_databases VALUES(db_id(substring(@data, @current_position, @next_comma - @current_position)));
			SET @current_position = @next_comma + 1;
			SET @next_comma = charindex (',', @data, @current_position);
		END;
	END;

	DECLARE @cmd varchar(8000);

	WHILE (SELECT COUNT(*) FROM @actionable_databases) > 0 BEGIN
		SET @database_id = (SELECT TOP 1 database_id FROM @actionable_databases)
		SET @database_name = '"' + db_name(@database_id) + '"';
		IF @action='FAILOVER' BEGIN 
			exec('ALTER DATABASE '+ @database_name + ' SET PARTNER FAILOVER');
			SET @errcode = @@error;
		END; ELSE IF @action='FORCE' BEGIN 
			exec('ALTER DATABASE '+ @database_name + ' SET PARTNER FORCE_SERVICE_ALLOW_DATA_LOSS');
			SET @errcode = @@error;
		END; ELSE IF @action='SUSPEND' BEGIN 
			exec('ALTER DATABASE '+ @database_name + ' SET PARTNER SUSPEND');
			SET @errcode = @@error;
		END; ELSE IF @action='RESUME' BEGIN 
			exec('ALTER DATABASE '+ @database_name + ' SET PARTNER RESUME');
			SET @errcode = @@error;
		END; ELSE IF @action='COPY' BEGIN
			/*  
				The idea behind copy is that it will backup the database on the current
				server and then copy it to the other server and restore it there. This is
				fairly dependent on both servers having a similar configuration. Otherwise
				you'll need to edit to utilize more specialized options. If you just have 
				one or two databases, it may not be worth it to set this up, but in our case
				we ended up mirroring databases dozens of times during testing and it was a 
				huge time waste to do it manually. 
			*/
		
    		DECLARE 
				@BKPDATLOC varchar(500),
				@BKPLOGLOC varchar(500); 
				
			SET @database_name = db_name(@database_id);
			
			-- Here we define the location of to where we're going to backup the databases
			-- on the local server.  Essentially, move of our servers have a directory F:\sql-migration
			-- which is shared as \\server-name\sql-migration..
			SET @BKPDATLOC = 'F:\sql-migration\' + @database_name + '.bak';
			SET @BKPLOGLOC = 'F:\sql-migration\' + @database_name + '-log.bak';
			
			-- in order to mirror a database, it must be in full recovery mode
			EXEC('ALTER DATABASE "'+ @database_name + '" SET RECOVERY FULL');
			
			BACKUP DATABASE @database_name TO DISK = @BKPDATLOC WITH FORMAT;
			BACKUP LOG @database_name TO DISK = @BKPLOGLOC WITH FORMAT ;
			
			-- copy the database to the share on the other server. If you have a different share
			-- name, this would be where you want to change it.
			SET @cmd = 'xcopy /y /q /i "F:\sql-migration\' + @database_name +'*.bak" "\\' + @partner + '\sql-migration\"' 
			EXEC xp_cmdshell @cmd;
			
			SET @errcode = @@error; -- Stores return value of statement in less volatile variable.
			SET @cmd = 'RESTORE DATABASE ' + QUOTENAME(REPLACE(@database_name,'"','')) 
				+ ' FROM DISK = ''' + @BKPDATLOC +''' WITH NORECOVERY, REPLACE'; 
			EXEC mirrortools 'PARTNERDO', @cmd;
			
			-- you must also restore a log file. It may not be necessary, but that's the rule.
			SET @cmd= 'RESTORE LOG ' + QUOTENAME(REPLACE(@database_name,'"','')) 
                + ' FROM DISK = ''' + @BKPLOGLOC +''' WITH NORECOVERY'; 
			EXEC mirrortools 'PARTNERDO', @cmd;
			
		END; ELSE IF @action = 'MIRROR' BEGIN	
			SET @cmd = 'ALTER DATABASE ' + db_name(@database_id) + ' SET PARTNER = ''' + @self_fqdn + '''' 
			EXEC mirrortools 'PARTNERDO', @cmd;
            EXEC('ALTER DATABASE ' + @database_name + ' SET PARTNER = ''' + @partner_fqdn + '''');
            IF @server_w IS NOT null BEGIN
		    	SET @cmd = 'ALTER DATABASE ' + QUOTENAME(db_name(@database_id)) + ' SET WITNESS = ''TCP://' 
			    	+ @server_w + '.' + @domain + ':' + @endpoint_port + ''''; 
		    	EXEC(@cmd);
            END;
		END; ELSE IF @action = 'MIRNOWIT' BEGIN
			SET @cmd = 'ALTER DATABASE ' + db_name(@database_id) + ' SET PARTNER = ''' + @self_fqdn + '''' 
			EXEC mirrortools 'PARTNERDO', @cmd;
            EXEC('ALTER DATABASE ' + @database_name + ' SET PARTNER = ''' + @partner_fqdn + '''');
		END; ELSE IF @action='KILLMIR' BEGIN 
			EXEC('ALTER DATABASE '+ @database_name + ' SET PARTNER OFF')
			SET @errcode = @@error;
		END; ELSE IF @action='RECOVER' BEGIN 
			EXEC('RESTORE DATABASE '+ @database_name + ' WITH RECOVERY')
			SET @errcode = @@error;
		END; ELSE IF @action = 'AUTO_FAILOVER_OFF' BEGIN
			SET @cmd = 'ALTER DATABASE ' + QUOTENAME(db_name(@database_id)) + ' SET WITNESS OFF';
			EXEC(@cmd);
			SET @errcode = @@error;
		END; ELSE IF @action = 'AUTO_FAILOVER_ON' BEGIN
			SET @cmd = 'ALTER DATABASE ' + QUOTENAME(db_name(@database_id)) 
				+ ' SET WITNESS = ''TCP://' + @server_w + '.' + @domain + ':' + @endpoint_port + ''''; 
			EXEC(@cmd);
			SET @errcode = @@error;
		END;

        -- if no errors, append database name to successes list
		IF @errcode = 0 OR @errcode is null BEGIN		
            IF @successes is null BEGIN
				SET @successes = @database_name + ', ';
            END; ELSE BEGIN
				SET @successes = @successes + @database_name + ', ';
            END;
		END; ELSE BEGIN
			IF @failures is null BEGIN
				SET @failures = @database_name + ', ';
            END; ELSE BEGIN
				SET @failures = @failures + @database_name + ', ';
            END;
		END;
		
        DELETE FROM @actionable_databases WHERE database_id = @database_id;
	END; 
	
	-- Provide some error reporting once actions have been performed on entire set...
	IF @action in ('COPY,',
					'MIRROR',
					'MIRNOWIT',
					'RECOVER',
					'FORCE',
					'SUSPEND',
					'FAILOVER',
					'RESUME',
					'AUTO_FAILOVER_OFF',
					'AUTO_FAILOVER_ON')
	BEGIN
		IF ((SELECT count(*) FROM @actionable_databases) = 0) AND (@failures is null) AND (@successes is null) BEGIN
			PRINT 'No databases were eligible for ' + @action + ' action.'
        END

		IF @failures is not null BEGIN
			PRINT @action + ' failed for the following database(s): ' 
				+ REPLACE(LEFT(@failures, LEN(@failures) - 2), '"', '') + '.';
        END

		IF @successes is not null BEGIN
			PRINT @action + ' succeeded for the following database(s): ' 
				+ REPLACE(LEFT(@successes, LEN(@successes) - 2), '"', '') + '.';
        END
	END
